Instructions for "https://android-build.linaro.org/builds/~linaro-android-restricted/juice-base-aosp/":https://android-build.linaro.org/builds/~linaro-android-restricted/juice-base-aosp/

h2. Prerequisites

h3. Get artifacts

To get the build artifacts you must be part of the linaro-android-restricted launchpad group. Contact "Philip Colmer" <philip.colmer@linaro.org> for access requests.

h3. Run the build

You'll need the latest ARM RTSM AEMv8 VE model and the path to this model. You'll also need a license to use this file.

h2. Get artifacts

Scroll down and click on 'Downloads'

Click on each link to download:
* boot.tar.bz2
* system.tar.bz2
* userdata.tar.bz2

h2. Get linaro image tools

Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools

<pre>
  $ sudo add-apt-repository ppa:linaro-maintainers/tools
  $ sudo apt-get update
  $ sudo apt-get install linaro-image-tools
</pre>

If you're using a released build (with a -release or from releases.linaro.org), skip this step.
If you're using a "tip" build do not skip the step and do the following:

<pre>
  $ sudo apt-get install bzr
  $ bzr branch lp:linaro-image-tools
</pre>

h2. Create binary for the ARM RTSM AEMv8 VE or FVP Base AEMv8 models

Run linaro image tools

pre. $ linaro-android-media-create --image_file mmc.bin --image_size 2000M --dev vexpress --system system.tar.bz2 --userdata userdata.tar.bz2 --boot boot.tar.bz2

If you're using tip of linaro image tools

pre. $ ./linaro-image-tools/linaro-android-media-create --image_file mmc.bin --image_size 2000M --dev vexpress --system system.tar.bz2 --userdata userdata.tar.bz2 --boot boot.tar.bz2

h2. Extract the axf and preboot files

pre. tar -jxvf boot.tar.bz2

h2. Setup the runtime environment

<pre>
  $ export MODEL_PATH=/path/to/RTSM_AEMv8_VE
  $ export ARMLMD_LICENSE_FILE="8224@localhost"
  $ ssh -L 8224:localhost:8224 -L 18224:localhost:18224 -N $USER@flexlm.linaro.org &
</pre>

h2. Running the models

If you are running these images on FVP Base AEMv8 models then change to boot/ directory and run

<pre>
  $ /path/to/FVP_Base_AEMv8A-AEMv8A/models/Linux64_GCC-4.1/FVP_Base_AEMv8A-AEMv8A \
        -C pctl.startup=0.0.0.0 \
        -C bp.secure_memory=0 \
        -C cluster0.NUM_CORES=1 \
        -C cluster1.NUM_CORES=1 \
        -C cache_state_modelled=0 \
        -C bp.pl011_uart0.untimed_fifos=1 \
        -C bp.secureflashloader.fname=bl1.bin \
        -C bp.flashloader0.fname=uefi_fvp-base.bin \
        -C bp.virtioblockdevice.image_path=mmc.bin
</pre>

But if you are running these images on RTSM AEMv8 VE models then run

<pre>
  $ model_shell64 -a $(pwd)/boot/linux-system.axf \
        $MODEL_PATH/models/Linux64_GCC-4.1/RTSM_VE_AEMv8A.so \
        -C motherboard.mmc.p_mmc_file=$(pwd)/mmc.bin \
        -C cluster.NUM_CORES=1 \
        -C cluster.cpu0.unpredictable_WPMASKANDBAS=0 \
        -C cluster.cpu0.unpredictable_non-contigous_BAS=0 \
        -C cluster.cpu1.unpredictable_WPMASKANDBAS=0 \
        -C cluster.cpu1.unpredictable_non-contigous_BAS=0 \
        -C cluster.cpu2.unpredictable_WPMASKANDBAS=0 \
        -C cluster.cpu2.unpredictable_non-contigous_BAS=0 \
        -C cluster.cpu3.unpredictable_WPMASKANDBAS=0 \
        -C cluster.cpu3.unpredictable_non-contigous_BAS=0 \
        -C cluster.take_ccfail_undef=0 \
        -C motherboard.hostbridge.userNetworking=true \
        -C motherboard.hostbridge.userNetPorts="5556=6565" \
        -C motherboard.smsc_91c111.enabled=1
</pre>

h3. Black screen

The boot screen has been disabled to speed up booting. This means you may not see anything on the CLCD terminal for a while depending on the performance of the machine the model is running on. For example a first boot on a 2 GHz machine with 32 GB of RAM took 10 minutes. Subsequent boots should take approximately half the time to boot.

h2. Console redirection

To redirect the console open a terminal and run

pre. telnet 127.0.0.1 5000

h2. Run the Android SDK

h3. Attach ADB

In the model's console run

<pre>
  $ stop adbd
  $ setprop service.adb.tcp.port 6565
  $ start adbd
</pre>

In a seperate terminal run

<pre>
  $ adb kill-server
  $ adb connect 127.0.0.1:5556
  $ adb wait-for-device
</pre>

You can then run

pre. adb shell

You can also run all of the standard Android SDK tools. Learn more at "http://developer.android.com/sdk/index.html":http://developer.android.com/sdk/index.html

